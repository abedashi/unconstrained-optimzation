import os
import numpy as np
import matplotlib.pyplot as plt


def plot(function, x_vals, title):
    # Plot the contours of the Chained Rosenbrock function
    x = np.linspace(-3, 3, 100)
    y = np.linspace(-3, 3, 100)
    X, Y = np.meshgrid(x, y)
    Z = function(np.array([X, Y]))
    plt.contour(X, Y, Z)

    # Plot the trajectory of the points generated by the methods
    x_vals = np.array(x_vals)
    plt.scatter(x_vals[:, 0], x_vals[:, 1], c='red', s=4)
    plt.plot(x_vals[:, 0], x_vals[:, 1], c='red', linewidth=1)

    # Plot the last value in green
    last_val = x_vals[-1, :]
    plt.scatter(last_val[0], last_val[1], c='green', s=12, label='Optimal Solution')

    plt.title(title)
    plt.legend()
    plt.show()

def plot_combined_results(
    func, 
    modified_newton_path, 
    steepest_path, 
    folder_name='default', 
    file_prefix='plot',
    optimal_point_newton=None, 
    optimal_point_steepest=None 
):
    # Ensure the assets folder and subfolder exist
    assets_folder = os.path.join("assets", folder_name)
    os.makedirs(assets_folder, exist_ok=True)

    # Check if the optimal points are the same
    same_optimal_point = (
        optimal_point_newton is not None and 
        optimal_point_steepest is not None and 
        np.allclose(optimal_point_newton, optimal_point_steepest)
    )

    # Compute function values for both methods
    modified_newton_values = [func(point) for point in modified_newton_path]
    steepest_values = [func(point) for point in steepest_path]

    # ----- Convergence Plot -----
    plt.figure(figsize=(8, 6))
    plt.plot(modified_newton_values, label="Modified Newton", marker='o')
    plt.plot(steepest_values, label="Steepest Descent", marker='s')
    if same_optimal_point and optimal_point_newton is not None:
        optimal_value = func(optimal_point_newton)
        plt.axhline(optimal_value, color='red', linestyle='--', label="Optimal Value")
    else:
        if optimal_point_newton is not None:
            optimal_value_newton = func(optimal_point_newton)
            plt.axhline(optimal_value_newton, color='blue', linestyle='--', label="Newton Optimal Value")
        if optimal_point_steepest is not None:
            optimal_value_steepest = func(optimal_point_steepest)
            plt.axhline(optimal_value_steepest, color='orange', linestyle='--', label="Steepest Optimal Value")
    plt.title(f"{file_prefix} - Convergence Plot")
    plt.xlabel("Iteration")
    plt.ylabel("Function Value (f(x))")
    plt.legend()
    plt.grid()

    # Save Convergence Plot
    convergence_plot_path = os.path.join(assets_folder, f"{file_prefix}_convergence_plot.png")
    plt.savefig(convergence_plot_path)
    print(f"Convergence plot saved to {convergence_plot_path}")
    plt.close()

    # ----- Path Plot in 2D -----
    plt.figure(figsize=(8, 6))
    modified_newton_path = np.array(modified_newton_path)
    steepest_path = np.array(steepest_path)
    plt.plot(modified_newton_path[:, 0], modified_newton_path[:, 1], label="Modified Newton Path", marker='o')
    plt.plot(steepest_path[:, 0], steepest_path[:, 1], label="Steepest Descent Path", marker='s')
    plt.scatter(modified_newton_path[0, 0], modified_newton_path[0, 1], color='red', label="Modified Newton Start", zorder=5)
    plt.scatter(modified_newton_path[-1, 0], modified_newton_path[-1, 1], color='green', label="Modified Newton End", zorder=5)
    plt.scatter(steepest_path[0, 0], steepest_path[0, 1], color='purple', label="Steepest Start", zorder=5)
    plt.scatter(steepest_path[-1, 0], steepest_path[-1, 1], color='orange', label="Steepest End", zorder=5)
    if same_optimal_point and optimal_point_newton is not None:
        plt.scatter(optimal_point_newton[0], optimal_point_newton[1], color='black', label="Optimal Point", zorder=10, marker='*', s=150)
    else:
        if optimal_point_newton is not None:
            plt.scatter(optimal_point_newton[0], optimal_point_newton[1], color='blue', label="Newton Optimal Point", zorder=10, marker='*', s=150)
        if optimal_point_steepest is not None:
            plt.scatter(optimal_point_steepest[0], optimal_point_steepest[1], color='orange', label="Steepest Optimal Point", zorder=10, marker='*', s=150)
    plt.title(f"{file_prefix} - Path in 2D Space")
    plt.xlabel("x1")
    plt.ylabel("x2")
    plt.legend()
    plt.grid()

    # Save Path Plot
    path_plot_path = os.path.join(assets_folder, f"{file_prefix}_path_plot.png")
    plt.savefig(path_plot_path)
    print(f"Path plot saved to {path_plot_path}")
    plt.close()

    # ----- Combined Plot for Display -----
    plt.figure(figsize=(12, 6))
    
    # Convergence Plot
    plt.subplot(1, 2, 1)
    plt.plot(modified_newton_values, label="Modified Newton", marker='o')
    plt.plot(steepest_values, label="Steepest Descent", marker='s')
    if same_optimal_point and optimal_point_newton is not None:
        optimal_value = func(optimal_point_newton)
        plt.axhline(optimal_value, color='red', linestyle='--', label="Optimal Value")
    else:
        if optimal_point_newton is not None:
            optimal_value_newton = func(optimal_point_newton)
            plt.axhline(optimal_value_newton, color='blue', linestyle='--', label="Newton Optimal Value")
        if optimal_point_steepest is not None:
            optimal_value_steepest = func(optimal_point_steepest)
            plt.axhline(optimal_value_steepest, color='orange', linestyle='--', label="Steepest Optimal Value")
    plt.title(f"{file_prefix} - Convergence Plot")
    plt.xlabel("Iteration")
    plt.ylabel("Function Value (f(x))")
    plt.legend()
    plt.grid()

    # Path Plot in 2D
    plt.subplot(1, 2, 2)
    plt.plot(modified_newton_path[:, 0], modified_newton_path[:, 1], label="Modified Newton Path", marker='o')
    plt.plot(steepest_path[:, 0], steepest_path[:, 1], label="Steepest Descent Path", marker='s')
    plt.scatter(modified_newton_path[0, 0], modified_newton_path[0, 1], color='red', label="Modified Newton Start", zorder=5)
    plt.scatter(modified_newton_path[-1, 0], modified_newton_path[-1, 1], color='green', label="Modified Newton End", zorder=5)
    plt.scatter(steepest_path[0, 0], steepest_path[0, 1], color='purple', label="Steepest Start", zorder=5)
    plt.scatter(steepest_path[-1, 0], steepest_path[-1, 1], color='orange', label="Steepest End", zorder=5)
    if same_optimal_point and optimal_point_newton is not None:
        plt.scatter(optimal_point_newton[0], optimal_point_newton[1], color='black', label="Optimal Point", zorder=10, marker='*', s=150)
    else:
        if optimal_point_newton is not None:
            plt.scatter(optimal_point_newton[0], optimal_point_newton[1], color='blue', label="Newton Optimal Point", zorder=10, marker='*', s=150)
        if optimal_point_steepest is not None:
            plt.scatter(optimal_point_steepest[0], optimal_point_steepest[1], color='orange', label="Steepest Optimal Point", zorder=10, marker='*', s=150)
    plt.title(f"{file_prefix} - Path in 2D Space")
    plt.xlabel("x1")
    plt.ylabel("x2")
    plt.legend()
    plt.grid()

    # Show Combined Plot in Cell
    plt.tight_layout()
    plt.show()
